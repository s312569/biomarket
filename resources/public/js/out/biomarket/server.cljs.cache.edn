;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros, alt! cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name biomarket.server, :imports nil, :requires {ut biomarket.utilities, sente taoensso.sente, dom om.dom, biomarket.utilities biomarket.utilities, om.dom om.dom, cljs.core.async cljs.core.async, taoensso.sente taoensso.sente, om.core om.core, om om.core, str clojure.string, clojure.string clojure.string}, :uses {pub cljs.core.async, <! cljs.core.async, chan cljs.core.async, sub cljs.core.async, >! cljs.core.async, unsub cljs.core.async, cb-success? taoensso.sente, put! cljs.core.async}, :defs {app-state {:name biomarket.server/app-state, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 14, :column 1, :end-line 14, :end-column 19, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 14, :column 10, :end-line 14, :end-column 19}}, -event-msg-handler {:name biomarket.server/-event-msg-handler, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 28, :column 1, :end-line 28, :end-column 29, :doc "Multimethod to handle Sente `event-msg`s", :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 28, :column 11, :end-line 28, :end-column 29, :doc "Multimethod to handle Sente `event-msg`s"}}, event-msg-handler {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 32, :column 7, :end-line 32, :end-column 24, :arglists (quote ([{:as ev-msg, :keys [id ?data event]}])), :doc "Wraps `-event-msg-handler` with logging, error catching, etc."}, :name biomarket.server/event-msg-handler, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 24, :method-params ([p__30509]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:as ev-msg, :keys [id ?data event]}])), :doc "Wraps `-event-msg-handler` with logging, error catching, etc."}, router_ {:name biomarket.server/router_, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 62, :column 1, :end-line 62, :end-column 17, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 62, :column 10, :end-line 62, :end-column 17}}, stop-router! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 64, :column 8, :end-line 64, :end-column 20, :arglists (quote ([]))}, :name biomarket.server/stop-router!, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start-router! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 66, :column 7, :end-line 66, :end-column 20, :arglists (quote ([]))}, :name biomarket.server/start-router!, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, _start-once {:name biomarket.server/_start-once, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 72, :column 1, :end-line 72, :end-column 21, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 72, :column 10, :end-line 72, :end-column 21}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:first-open? :chsk/recv :ch-recv :default :ch-chsk :type :chsk/state :topic :state :chsk-state :event :notif-chan :req-chan :some/broadcast :id :?data :chsk :pub-chan :send-fn :hierarchy :auto :chsk-send! :chsk/handshake}, :order [:topic :type :auto :chsk :ch-recv :send-fn :state :req-chan :notif-chan :pub-chan :ch-chsk :chsk-send! :chsk-state :hierarchy :id :default :?data :event :chsk/state :first-open? :chsk/recv :chsk/handshake :some/broadcast]}, :doc nil}
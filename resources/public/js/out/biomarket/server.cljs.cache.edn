;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros, alt! cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name biomarket.server, :imports nil, :requires {ut biomarket.utilities, sente taoensso.sente, dom om.dom, biomarket.utilities biomarket.utilities, om.dom om.dom, cljs.core.async cljs.core.async, taoensso.sente taoensso.sente, om.core om.core, om om.core, str clojure.string, clojure.string clojure.string}, :uses {pub cljs.core.async, <! cljs.core.async, chan cljs.core.async, sub cljs.core.async, >! cljs.core.async, unsub cljs.core.async, cb-success? taoensso.sente, put! cljs.core.async}, :defs {get-data {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 60, :column 7, :end-line 60, :end-column 15, :arglists (quote ([owner {:keys [type], :as m} rf]))}, :name biomarket.server/get-data, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 15, :method-params ([owner p__157505 rf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists (quote ([owner {:keys [type], :as m} rf]))}, publish-update {:name biomarket.server/publish-update, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 68, :column 1, :end-line 68, :end-column 25, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 68, :column 11, :end-line 68, :end-column 25}}, _start-once {:name biomarket.server/_start-once, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 48, :column 1, :end-line 48, :end-column 21, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 48, :column 10, :end-line 48, :end-column 21}}, -event-msg-handler {:name biomarket.server/-event-msg-handler, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 29, :column 1, :end-line 29, :end-column 29, :doc "Multimethod to handle Sente `event-msg`s", :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 29, :column 11, :end-line 29, :end-column 29, :doc "Multimethod to handle Sente `event-msg`s"}}, save-data {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 54, :column 7, :end-line 54, :end-column 16, :arglists (quote ([{:keys [type data], :as m}] [{:keys [type data], :as m} rf])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [type data], :as m}] [{:keys [type data], :as m} rf]), :arglists ([{:keys [type data], :as m}] [{:keys [type data], :as m} rf]), :arglists-meta (nil nil)}}, :name biomarket.server/save-data, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([{:keys [type data], :as m}] [{:keys [type data], :as m} rf]), :arglists ([{:keys [type data], :as m}] [{:keys [type data], :as m} rf]), :arglists-meta (nil nil)}, :method-params ([{:keys [type data], :as m}] [{:keys [type data], :as m} rf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists ([{:keys [type data], :as m}] [{:keys [type data], :as m} rf])}, router_ {:name biomarket.server/router_, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 38, :column 1, :end-line 38, :end-column 17, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 38, :column 10, :end-line 38, :end-column 17}}, dispatch-broadcast {:name biomarket.server/dispatch-broadcast, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 103, :column 1, :end-line 103, :end-column 29, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 103, :column 11, :end-line 103, :end-column 29}}, event-msg-handler {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 33, :column 7, :end-line 33, :end-column 24, :arglists (quote ([{:as ev-msg, :keys [id ?data event]}])), :doc "Wraps `-event-msg-handler` with logging, error catching, etc."}, :name biomarket.server/event-msg-handler, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 24, :method-params ([p__157487]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:as ev-msg, :keys [id ?data event]}])), :doc "Wraps `-event-msg-handler` with logging, error catching, etc."}, start-router! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 42, :column 7, :end-line 42, :end-column 20, :arglists (quote ([]))}, :name biomarket.server/start-router!, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stop-router! {:protocol-inline nil, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 40, :column 8, :end-line 40, :end-column 20, :arglists (quote ([]))}, :name biomarket.server/stop-router!, :variadic false, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, app-state {:name biomarket.server/app-state, :file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 14, :column 1, :end-line 14, :end-column 19, :meta {:file "/home/jason/Dropbox/biomarket/src/cljs/biomarket/server.cljs", :line 14, :column 10, :end-line 14, :end-column 19}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:biomarket.server/save :first-open? :chsk/recv :ch-recv :default :uid :amend-project-status :ch-chsk :type :mounted-projects :chsk/state :topic :state :chsk-state :pid :event :notif-chan :skills :req-chan :project :id :biomarket.server/update :comment :?data :chsk :pub-chan :biomarket.server/get :send-fn :hierarchy :comments-read :auto :chsk-send! :chsk/handshake :data}, :order [:topic :type :auto :chsk :ch-recv :send-fn :state :mounted-projects :req-chan :notif-chan :pub-chan :ch-chsk :chsk-send! :chsk-state :hierarchy :id :default :?data :event :data :biomarket.server/save :biomarket.server/get :project :comment :pid :skills :uid :amend-project-status :comments-read :biomarket.server/update :chsk/state :first-open? :chsk/recv :chsk/handshake]}, :doc nil}